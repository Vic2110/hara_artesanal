{"ast":null,"code":"// Este archivo simula las llamadas a un backend\n// En un proyecto real, aquí harías fetch() o usarías una librería como Axios\n// para comunicarte con tu API que a su vez interactuaría con MySQL.\n\n// Simula un registro de usuario\nexport const registerUser = async userData => {\n  console.log('Simulando registro de usuario:', userData);\n  // Aquí iría la llamada real a tu API de registro\n  // const response = await fetch('/api/register', { method: 'POST', body: JSON.stringify(userData) });\n  // const data = await response.json();\n  // return data;\n\n  // Simulación de respuesta exitosa\n  return new Promise(resolve => {\n    setTimeout(() => {\n      console.log('Registro simulado exitoso');\n      resolve({\n        success: true,\n        message: 'Usuario registrado con éxito (simulado)'\n      });\n    }, 1000); // Simula un delay de red\n  });\n};\n\n// Simula un inicio de sesión de usuario\nexport const loginUser = async credentials => {\n  console.log('Simulando inicio de sesión:', credentials);\n  // Aquí iría la llamada real a tu API de login\n  // const response = await fetch('/api/login', { method: 'POST', body: JSON.stringify(credentials) });\n  // const data = await response.json();\n  // return data;\n\n  // Simulación de respuesta exitosa\n  return new Promise(resolve => {\n    setTimeout(() => {\n      console.log('Inicio de sesión simulado exitoso');\n      resolve({\n        success: true,\n        message: 'Inicio de sesión exitoso (simulado)',\n        token: 'fake-jwt-token'\n      });\n    }, 1000); // Simula un delay de red\n  });\n};\n\n// Simula obtener productos (ya lo tenemos en mock, pero así se haría con API)\nexport const fetchProducts = async () => {\n  console.log('Simulando obtención de productos');\n  // Aquí iría la llamada real a tu API de productos\n  // const response = await fetch('/api/products');\n  // const data = await response.json();\n  // return data;\n\n  // Simulación usando mock data\n  return new Promise(resolve => {\n    setTimeout(() => {\n      console.log('Productos obtenidos (simulado)');\n      // Importar mock data aquí si no quieres tenerla en App.js\n      const {\n        products\n      } = require('../mock/products');\n      resolve({\n        success: true,\n        products\n      });\n    }, 500);\n  });\n};","map":{"version":3,"names":["registerUser","userData","console","log","Promise","resolve","setTimeout","success","message","loginUser","credentials","token","fetchProducts","products","require"],"sources":["C:/Users/HP/Downloads/react-template-base/src/utils/api.js"],"sourcesContent":["// Este archivo simula las llamadas a un backend\n// En un proyecto real, aquí harías fetch() o usarías una librería como Axios\n// para comunicarte con tu API que a su vez interactuaría con MySQL.\n\n// Simula un registro de usuario\nexport const registerUser = async (userData) => {\n  console.log('Simulando registro de usuario:', userData);\n  // Aquí iría la llamada real a tu API de registro\n  // const response = await fetch('/api/register', { method: 'POST', body: JSON.stringify(userData) });\n  // const data = await response.json();\n  // return data;\n\n  // Simulación de respuesta exitosa\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      console.log('Registro simulado exitoso');\n      resolve({ success: true, message: 'Usuario registrado con éxito (simulado)' });\n    }, 1000); // Simula un delay de red\n  });\n};\n\n// Simula un inicio de sesión de usuario\nexport const loginUser = async (credentials) => {\n  console.log('Simulando inicio de sesión:', credentials);\n  // Aquí iría la llamada real a tu API de login\n  // const response = await fetch('/api/login', { method: 'POST', body: JSON.stringify(credentials) });\n  // const data = await response.json();\n  // return data;\n\n  // Simulación de respuesta exitosa\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      console.log('Inicio de sesión simulado exitoso');\n      resolve({ success: true, message: 'Inicio de sesión exitoso (simulado)', token: 'fake-jwt-token' });\n    }, 1000); // Simula un delay de red\n  });\n};\n\n// Simula obtener productos (ya lo tenemos en mock, pero así se haría con API)\nexport const fetchProducts = async () => {\n  console.log('Simulando obtención de productos');\n  // Aquí iría la llamada real a tu API de productos\n  // const response = await fetch('/api/products');\n  // const data = await response.json();\n  // return data;\n\n  // Simulación usando mock data\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      console.log('Productos obtenidos (simulado)');\n      // Importar mock data aquí si no quieres tenerla en App.js\n      const { products } = require('../mock/products');\n      resolve({ success: true, products });\n    }, 500);\n  });\n};"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA,OAAO,MAAMA,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9CC,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEF,QAAQ,CAAC;EACvD;EACA;EACA;EACA;;EAEA;EACA,OAAO,IAAIG,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACfJ,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MACxCE,OAAO,CAAC;QAAEE,OAAO,EAAE,IAAI;QAAEC,OAAO,EAAE;MAA0C,CAAC,CAAC;IAChF,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG,MAAOC,WAAW,IAAK;EAC9CR,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEO,WAAW,CAAC;EACvD;EACA;EACA;EACA;;EAEA;EACA,OAAO,IAAIN,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACfJ,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAChDE,OAAO,CAAC;QAAEE,OAAO,EAAE,IAAI;QAAEC,OAAO,EAAE,qCAAqC;QAAEG,KAAK,EAAE;MAAiB,CAAC,CAAC;IACrG,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvCV,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;EAC/C;EACA;EACA;EACA;;EAEA;EACA,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACfJ,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAC7C;MACA,MAAM;QAAEU;MAAS,CAAC,GAAGC,OAAO,CAAC,kBAAkB,CAAC;MAChDT,OAAO,CAAC;QAAEE,OAAO,EAAE,IAAI;QAAEM;MAAS,CAAC,CAAC;IACtC,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}